name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Bootstrap packages
        run: npm run setup

      - name: Set environment variables
        run: |
          echo "SCHEMA_VERSION=1.0.0" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=3306" >> $GITHUB_ENV
          echo "DB_USERNAME=root" >> $GITHUB_ENV
          echo "DB_PASSWORD=password" >> $GITHUB_ENV
          echo "DB_DATABASE=test_db" >> $GITHUB_ENV

      - name: Wait for MySQL to be ready
        run: |
          for i in {30..0}; do
            if mysqladmin ping -h localhost -P 3306 --silent; then
              echo "MySQL is up"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 1
          done

      - name: Run DB migrations - service-a
        run: npx ts-node -r tsconfig-paths/register ./node_modules/typeorm/cli.js migration:run --dataSource packages/service-a/src/data-source.ts
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: password
          DB_DATABASE: test_db

      - name: üîç Validate schema - service-a
        run: npx ts-node packages/service-a/src/scripts/validate-schema.ts

      - name: üîç Validate schema - service-b
        run: npx ts-node packages/service-b/src/scripts/validate-schema.ts

      - name: Build
        run: npm run build

      - name: Run Tests
        run: npm run test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_USERNAME: root
          DB_PASSWORD: password
          DB_DATABASE: test_db


  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      run: npm ci

    - name: Bootstrap packages
      run: npm run bootstrap

    - name: Build
      run: npm run build

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Version and Publish
      run: npm run publish -- --yes
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Service A Docker image
      run: |
        docker build -f packages/service-a/Dockerfile -t service-a:latest .

    - name: Build Service B Docker image
      run: |
        docker build -f packages/service-b/Dockerfile -t service-b:latest .
